pub class range: Iter{Num} | Iterator{Num}
  curr: Num
  start: Num
  step: Num
  stop: Maybe{Num}

  def init(start: Num, stop: Maybe{Num}, step: Maybe{Num})
    self.start = start
    self.curr = start
    self.stop = stop
    self.step = match step
      case Just(s) => s
      case None => 1
    end
  end

  pub def next()
    match self.stop
      case Just(stop) => do
        if self.curr >= stop then
          return None
        end
        let res = Just(self.curr)
        self.curr += self.step
        return res
      end
      case None => do
        let res = Just(self.curr)
        self.curr += self.step
        return res
      end
    end
  end

  pub def iter()
    return self
  end
end

pub def zip{T, U}(x: Iterator{T}, y: Iterator{U}): List{Tuple{T, U}}
  let res = [] as List{Tuple{T, U}}
  while True
    match (x.next(), y.next())
      case (Just(a), Just(b)) => res.append((a, b))
      case _ => break
    end
  end
  return res
end
