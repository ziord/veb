const std = @import("std");
const parse = @import("parse.zig");
const compile = @import("compile.zig");
const vm = @import("vm.zig");
const debug = @import("debug.zig");
const value = @import("value.zig");
const link = @import("link.zig");
const check = @import("check.zig");
const NovaAllocator = @import("allocator.zig");
const Vec = @import("vec.zig").Vec;

pub fn main() !void {
  std.debug.print("hello nova!\n", .{});
}

fn doTest(src: []const u8) !value.Value {
  var nva = NovaAllocator.init(std.heap.ArenaAllocator.init(std.testing.allocator));
  defer nva.deinit();
  const filename = "test.nova";
  var parser = parse.Parser.init(src, filename, &nva);
  const node = parser.parse();
  var tych = check.TypeChecker.init(nva.getArenaAllocator(), "test.nova");
  try tych.typecheck(node);
  var code = value.Code.init();
  var cpu = vm.VM.init(&nva, &code);
  defer cpu.deinit(); // don't deinit for now.
  var compiler = compile.Compiler.init(node, filename, &cpu, &code, &nva);
  compiler.compile();
  debug.Disassembler.disCode(code, "test");
  try cpu.run();
  value.printValue(cpu.stack[0]);
  std.debug.print("\n", .{});
  // TODO: refactor testing, as it currently uses invalidated data
  return cpu.stack[0]; // !!invalidated!!
}

test "arithmetic ops" {
  const srcs = [_][]const u8{
    "(0x2 * 45 / 2 * 5 - 1 + 6 / 3 - 0x5 + 6 * (0b1 - 0o2) / 0o1_5) + 234_56.e-2 - 2 % (5-4) - 6",
    "2 ^ 3 ^ (6 | 0 | 1 | 5)",
    "2 | 3 ^ 1 & 0xff",
    "300 >> 8 & 0xff",
    "0xf << 6 | 2",
    "~0x123 + --2",
    "~0x123 ++ --2",
    "0 ++ --2 + ~0x123",
    "0 ++ --2 + ~0x123 - ~(3 * 4 - (6 + 2 ) * 5)",
  };
  const exp = [_]f64{449.09846153846155, 6, 2, 1, 962, -290, -290, -290, -317};
  for (srcs, 0..) |src, i| {
    const got = try doTest(src);
    try std.testing.expect(value.asNumber(got) == exp[i]);
  }
}

test "comparison ops" {
  const srcs = [_][]const u8{
      "0x123 < 4",
      "123.45 > 12_40",
      "0b111_000 <= 0o12_12",
      "123.e-2 >= 0x12_34_5",
      "123.e-2 != 0x12_34_5",
      "0xdeadbeef == 0o33653337357",
  };
  const exp = [_]bool{false, false, true, false, true, true};
  for (srcs, 0..) |src, i| {
    const got = try doTest(src);
    try std.testing.expect(value.asBool(got) == exp[i]);
  }
}

test "booleans" {
  const srcs = [_][]const u8{
      "0x123 < 4 and 1 < 5",
      "123.45 > 12_40 or 2 == 2",
      "0b111_000 <= 0o12_12 or 1 > 0.5",
      "123.e-2 >= 0x12_34_5 and 6 as bool and 7 > 2",
      "123.e-2 != 0x12_34_5 and 0 as bool or 6 > 2",
      "(1 as bool or 2 as bool) == 1 as bool",
      "(1 as bool and 2 as bool) == 2 as bool",
      "(0b00 as bool and 2 as bool) == 0o0 as bool",
      "(0x0 as bool or 2 as bool) == 2 as bool",
      "true or false",
      "false or true",
      "false or false",
      "true or true",
      "true and false",
      "false and true",
      "false and false",
      "!false",
      "!true",
      "!(0x0_0 as bool)",
      "!!(1 as bool)",
      "!(1 as bool)",
      "'foxes and pirates' == 'foxes and pirates'",
      "'foxes and pirates' != 'fishes and pirates'",
  };
  const exp = [_]bool{
    false, true, true, false, true, 
    true, true, true, true, true, 
    true, false, true, false, false, false,
    true, false, true, true, false, 
    true, true
  };
  for (srcs, 0..) |src, i| {
    var got = try doTest(src);
    try std.testing.expect(value.asBool(got) == exp[i]);
  }
}

test "strings" {
  const srcs = [_][]const u8{
      "'foxes'",
      \\"the quick brown fox jumps over the lazy dog,\nthe quick brown fox jumps over the lazy dog,\nthe quick brown fox jumps over the lazy dog,\nthe quick brown fox jumps over the lazy dog\n
       ++
      \\the quick brown fox jumps over the lazy dog,\nthe quick brown fox jumps over the lazy dog,\nthe quick brown fox jumps over the lazy dog,\nthe quick brown fox jumps over the lazy dog"
  };
  const exp = [_][]const u8{
    "foxes", 
    "the quick brown fox jumps over the lazy dog,\nthe quick brown fox jumps over the lazy dog,\nthe quick brown fox jumps over the lazy dog,\nthe quick brown fox jumps over the lazy dog\n" ++
    "the quick brown fox jumps over the lazy dog,\nthe quick brown fox jumps over the lazy dog,\nthe quick brown fox jumps over the lazy dog,\nthe quick brown fox jumps over the lazy dog"
  };
  for (srcs) |src| {
    _ = try doTest(src);
    _ = exp;
  }
}

test "lists" {
  const srcs = [_][]const u8{
    "[1, 2, 3, 4]",
    "[1, 'fox', 3, 'cat']",
    "[1]",
    "[]",
    "[1, 'fox', 3, 'cat', [1, 'fox', 3, 'cat']]",
    "[1, 2, {'a': 'set'}]"
  };
  for (srcs) |src| {
    _ = try doTest(src);
  }
}

test "maps" {
  const srcs = [_][]const u8{
    "{'abc': 123}",
    "{'abc' as bool | str: 123, true: 0xff, 'obs': 0b101}",
    "{}",
    // "{'abc': 123, true: 0xff, 'obs': 'fin', 0.123: {'abc': 123, true: 0xff, 'obs': 'fin'}}",
    "{24: [1, 2, 3]}",
  };
  for (srcs) |src| {
    _ = try doTest(src);
  }
}

test "regs" {
  var src = \\ {(1 * 2) * 3 - (3 * 5) : [1+2+3+4+5+6+7+8+9+10+11+12+13+14+15+16+17+18+19+20+21+22+23+24+25+26+27+28+29+30+31+32+33+34+35+36+37+38+39+40+41+42+43+44+45+46+47+48+49+50+51+52+53+54+55+56+57+58+59+60+61+62+63+64+65+66+67+68+69+70+71+72+73+74+75+76+77+78+79+80+81+82+83+84+85+86+87+88+89+90+91+92+93+94+95+96+97+98+99+100+101+102+103+104+105+106+107+108+109+110+111+112+113+114+115+116+117+118+119+120+121+122+123+124+125+126+127+128+129+130+131+132+133+134+135+136+137+138+139+140+141+142+143+144+145+146+147+148+149+150+151+152+153+154+155+156+157+158+159+160+161+162+163+164+165+166+167+168+169+170+171+172+173+174+175+176+177+178+179+180+181+182+183+184+185+186+187+188+189+190+191+192+193+194+195+196+197+198+199+200+201+202+203+204+205+206+207+208+209+210+211+212+213+214+215+216+217+218+219+220+221+222+223+224+225+226+227+228+229+230+231+232+233+234+235+236+237+238+239+240+241+242+243+244+245+246+247+248+249+250+251+252+253+254+255+256+257+258+259+260+261+262+263+264+265+266+267+268+269+270+271+272+273+274+275+276+277+278+279+280+281+282+283+284+285+286+287+288+289+290+291+292+293+294+295+296+297+298+299+300+301+302+303+304+305+306+307+308+309+310+311+312+313+314+315+316+317+318+319+320+321+322+323+324+325+326+327+328+329+330+331+332+333+334+335+336+337+338+339+340+341+342+343+344+345+346+347+348+349+350+351+352+353+354+355+356+357+358+359+360+361+362+363+364+365+366+367+368+369+370+371+372+373+374+375+376+377+378+379+380+381+382+383+384+385+386+387+388+389+390+391+392+393+394+395+396+397+398+399+400









  \\]}
;
  _ = try doTest(src);
}

test "vars" {
  var src = 
  \\ let x = 5 * 0xff - 2
  \\ let k = 10
  \\ let p = (k = 5)
  \\ [p, k]
  \\ let y = (
  \\     x - 5
  \\ )
  \\ let z = [
  \\     x,
  \\ y,
  \\ {
  \\     x: y
  \\ }
  \\ ]
  \\ {123: "foxlike"}
  \\ #let y = 10
  \\ #[x, y]
  \\ z
  ;
  _ = try doTest(src);
  var src2 =
  \\ let x = 5
  \\ x += 10
  \\ x -= 3
  \\ x /= 2
  \\ x *= 2
  \\ x &= 1
  \\ x ^= 3
  \\ x |= 4
  \\ x
  ;
  var got = try doTest(src2);
  try std.testing.expect(value.asNumber(got) == 7);
}

test "types" {
  var src = 
  \\ type A{K, V} = (map{K?, map{K, (V | C)? | (C?)}?}?)
  \\ type B{K, V, T} = map{K?, map{K, (V | A? | B | C)? | (A? | B?)}?}? | T
  \\ type C = str
  \\ type Foo = (map{str, bool}? | (list{(A)?})?)?
  \\ let x: A{bool, str?} = {false as bool?: {true: 'ok' as str?} as map{bool, str?}}
  \\ let y = 15 as num
  \\ let j = (15 as num) as num
  \\ let z = {15: ['foxy']} as map{num, list{str}}
  \\ let z1 = {15: ['foxy']} as (map{num, list{str}})
  \\ let z2 = {12: ['foxy']} as (map{num, list{str}})?
  \\ let t = 5 as (num | str)?
  \\ (t as (str | num) ?)
  ;
  _ = try doTest(src);
}

test "blocks" {
  var src =
  \\ let x = 'over the garden wall!'
  \\ do
  \\   let x = 5
  \\   let y = 10
  \\   let z = {x: x * y}
  \\   z
  \\ end
  \\ do 
  \\   let x = 't-rex'
  \\   do
  \\      x = 'foo-foo'
  \\   end
  \\   x
  \\ end
  \\ x
  ;
  _ = try doTest(src);
}

test "linking" {
  var src =
  \\ type HashMap{K, V} = map{K, V}
  \\ type StringHashMap{V} = HashMap{str, V}
  \\ type NumList = list{num}
  \\ let a: NumList = [1, 2]
  \\ let b: HashMap{num, bool} = {0: false}
  \\ let c: StringHashMap{bool} = {'foo': false}
  \\ let x: str = 'over the garden wall!'
  \\ let y = 'oops'
  ;
  _ = try doTest(src);
  var src2 =
  \\ type A = str
  \\ type B = num
  \\ type C = map
  \\ type D{K} = C{K, B}
  \\ type HashMap{K, V} = C{K, V}
  \\ type StringHashMap{V} = HashMap{str, V}
  \\ type BadList = list{StringHashMap{HashMap{A, D{B}?}}}
  \\ type X = (D{BadList} | D{B}? | BadList)?
  \\ let x: X = [{'fox': {'fin': {0x12: 0xbee} as map{num, num}?}}]
  \\ x
  \\ let y: X = {10: 5} as map{num, num}?
  \\ y
  ;
  _ = try doTest(src2);
  var src3 =
  \\ type HashMap{K, V} = map{K, V}
  \\ let x: HashMap{num, str} = {5: 'okay'}
  \\ x as map{num, str} as map{num, str}?
  ;
  _ = try doTest(src3);
}

test "self-reference" {
  var src =
  \\ type K = str | bool | num
  \\ type V = num | str | map{K, V}
  \\ let p = [1, [2], 3, [1, 2, [3]]]
  // TODO:
  // \\ {'abc' as K: 123 as V, true as K: 0xff as V, 'obs' as K: 'fin' as V, 0.123 as K: {'abc' as K: 123 as V, true as K: 0xff as V, 'obs' as K: 'fin' as V}}
  ;
  _ = try doTest(src);
}

test "typecheck" {
  var src =
  \\ let x = 5 as bool
  \\ x as bool and 'fox' as bool
  \\ let p = 5 as (num | str)?
  \\ let q: (num | str | bool) = 5
  \\ 
  \\ type X = (num | str)?
  \\ let y: X = 'food' as num | str
  \\ y
  \\
  \\ let a: str | num = 10
  \\ let b: num | str = 'foo'
  \\ b = a
  \\ b as num + 5 # okay, since the active type of a is propagated to b.
  // \\ type X = (num | str)?  # Nullable does not distribute over it's subtype
  // \\ let y: X = 'food' as str? # fails. 
  ;
  _ = try doTest(src);
}